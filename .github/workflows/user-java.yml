name: User Java CICD

env:
  # Using ACR
  registry: openhackkz15cji1acr.azurecr.io
  repository: devopsoh/api-user-java
# Using Docker Package
#  registry: docker.pkg.github.com
#  repository: hattan/openhack-devops-team-gh/api-user-java
  docker_path: apis/user-java
  staging_url: https://openhackkz15cji1userjava-staging.azurewebsites.net/
  prod_url: https://openhackkz15cji1userjava.azurewebsites.net/
  resource_group: openhackkz15cji1rg
  webapp_name: openhackkz15cji1userjava
  build_name: User Java
  webv_path: apis/user-java/webvalidate

on:
  push:
    branches: [ main ]
    paths: 
      - apis/user-java/**  
      - .github/workflows/user-java.yml
  pull_request:
    branches: [ main ]
    paths: 
      - apis/user-java/**
      - .github/workflows/user-java.yml

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: apis/user-java    
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Run Unit Tests
      run: mvn test

    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  docker_build_and_push:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:     
    - uses: actions/checkout@v2
    - name: Login to ACR
      uses: docker/login-action@v1
      with:
        registry: ${{ env.registry }}
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}
    # Using ACR
    #- name: Docker login     
    #  run: docker login $registry -u ${{ secrets.ACR_USER }} -p ${{ secrets.ACR_KEY }}
    # Using Github Packages
    #- name: Docker login     
    #  run: docker login $registry -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.GITHUB_TOKEN }}
    - name: Docker build
      run: docker build -t ${{ env.registry }}/${{ env.repository }}:${{github.run_number}} --build-arg build_version=${{github.run_number}} ${{ env.docker_path }}

    - name: Docker Push
      run: docker push ${{ env.registry }}/${{ env.repository }}:${{github.run_number}}  

    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });